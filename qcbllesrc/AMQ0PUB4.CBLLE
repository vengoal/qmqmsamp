       IDENTIFICATION DIVISION.
      ****************************************************************
      *                                                              *
      * Program name: AMQ0PUB4                                       *
      *                                                              *
      * Description: Sample COBOL program that puts messages         *
      *              to a TOPIC (example using MQPUT)                *
      *   <copyright                                                 *
      *   notice="lm-source-program"                                 *
      *   pids="5724-H72,"                                           *
      *   years="2008,2012"                                          *
      *   crc="3819935660" >                                         *
      *   Licensed Materials - Property of IBM                       *
      *                                                              *
      *   5724-H72,                                                  *
      *                                                              *
      *   (C) Copyright IBM Corp. 2008, 2012 All Rights Reserved.    *
      *                                                              *
      *   US Government Users Restricted Rights - Use, duplication or  *
      *   disclosure restricted by GSA ADP Schedule Contract with    *
      *   IBM Corp.                                                  *
      *   </copyright>                                               *
      *                                                              *
      ****************************************************************
      *                                                              *
      * Function:                                                    *
      *                                                              *
      *                                                              *
      *   AMQ0PUB4 is a sample COBOL program to publish messages     *
      *   to a topic.                                                *
      *                                                              *
      *      -- sample message input is read using the ACCEPT        *
      *         verb, with a blank entry indicating the end of       *
      *         input; the program parameter identifies the          *
      *         target topic                                         *
      *         (So if this sample is run in an interactive job,     *
      *         lines would be read from the terminal)               *
      *                                                              *
      *      -- puts each text line in the input to the topic        *
      *         taking each line of text as the content              *
      *         of a message                                         *
      *                                                              *
      *      -- writes a message for each MQI reason other than      *
      *         MQRC-NONE; stops if there is a MQI completion        *
      *         code of MQCC-FAILED                                  *
      *                                                              *
      *    Program logic:                                            *
      *         MQCONNect to target queue manager                    *
      *         MQOPEN target topic for OUTPUT/publishing            *
      *         display prompt for message(s)                        *
      *         while no MQI failures,                               *
      *         .  ACCEPT line of text                               *
      *         .  MQPUT message with text to target topic           *
      *         MQCLOSE target topic                                 *
      *         MQDISConnect from queue manager                      *
      *                                                              *
      *                                                              *
      ****************************************************************
      *                                                              *
      *                                                              *
      *                                                              *
      *   Exceptions signaled:  none                                 *
      *   Exceptions monitored: none                                 *
      *                                                              *
      *   AMQ0PUB4 has 2 parameters - (1) name of the target topic   *
      *                               (2) name of the queue manager  *
      *                                                              *
      ****************************************************************
       PROGRAM-ID. 'AMQ0PUB4'.

      ****************************************************************
       DATA DIVISION.
       WORKING-STORAGE SECTION.
      *
      **  Declare MQI structures needed
      * MQI named constants
       01 MY-MQ-CONSTANTS.
          COPY CMQV.
      * Object Descriptor
       01 OBJECT-DESCRIPTOR.
          COPY CMQODV.
      * Message Descriptor
       01 MESSAGE-DESCRIPTOR.
          COPY CMQMDV.
      * Put message options
       01 PMOPTIONS.
          COPY CMQPMOV.
      ** note, sample uses defaults where it can
       01 HCONN                      PIC S9(9) BINARY.
       01 Q-HANDLE                   PIC S9(9) BINARY.
       01 OPTIONS                    PIC S9(9) BINARY.
       01 COMPLETION-CODE            PIC S9(9) BINARY.
       01 OPEN-CODE                  PIC S9(9) BINARY.
       01 CON-REASON                 PIC S9(9) BINARY.
       01 REASON                     PIC S9(9) BINARY.
       01 BUFFER                     PIC X(100).
       01 BUFFER-LENGTH              PIC S9(9) BINARY.
       01 TOPIC-LENGTH               PIC S9(9) BINARY VALUE 0.
       01 REAL-TOPIC-LENGTH          PIC S9(9) BINARY VALUE 0.
       01 WORK-FIELD                 PIC X(60).
       LINKAGE SECTION.
       01 TARGET-TOPIC               PIC X(48).
       01 QUEUE-MANAGER              PIC X(48).

      ****************************************************************
       PROCEDURE DIVISION USING TARGET-TOPIC, QUEUE-MANAGER.
       P0.
      ** indicate that sample program has started
           DISPLAY 'AMQ0PUB4 start'.

      ****************************************************************
      *                                                              *
      *    use parameters as the name of the target topic            *
      *                              and the queue manager           *
      *                                                              *
      ****************************************************************
           DISPLAY "target topic is " TARGET-TOPIC.
           DISPLAY "queue manager is " QUEUE-MANAGER.

      ****************************************************************
      *                                                              *
      *   Connect to queue manager                                   *
      *                                                              *
      ****************************************************************
           CALL 'MQCONN'
            USING QUEUE-MANAGER, HCONN,
            COMPLETION-CODE, CON-REASON.

      *      report reason and stop if it failed
           IF COMPLETION-CODE IS EQUAL TO MQCC-FAILED
             DISPLAY 'MQCONN ended with reason code ' CON-REASON
             MOVE CON-REASON TO RETURN-CODE
             GOBACK
             END-IF.

      ****************************************************************
      *                                                              *
      *   Open the target topic for output (and fail if MQM is       *
      *   quiescing)                                                 *
      *                                                              *
      ****************************************************************
       OPENS.
           move MQOT-TOPIC to MQOD-OBJECTTYPE.
           move MQOD-VERSION-4 to MQOD-VERSION.

      *     Work out how many trailing spaces we have to determine
      *     real length of TOPIC STRING. Need to reverse the string
      *     as there is no TRAILING keyword in some COBOL
      *     implementations.
           MOVE FUNCTION REVERSE (TARGET-TOPIC) TO WORK-FIELD.
           INSPECT WORK-FIELD TALLYING TOPIC-LENGTH
               FOR LEADING SPACES.
           SUBTRACT TOPIC-LENGTH FROM LENGTH OF TARGET-TOPIC
               GIVING REAL-TOPIC-LENGTH.
           MOVE REAL-TOPIC-LENGTH TO MQOD-OBJECTSTRING-VSLENGTH.
           SET MQOD-OBJECTSTRING-VSPTR TO ADDRESS OF TARGET-TOPIC.

           ADD MQOO-OUTPUT MQOO-FAIL-IF-QUIESCING
                     GIVING OPTIONS.
           CALL 'MQOPEN'
            USING HCONN, OBJECT-DESCRIPTOR,
            OPTIONS, Q-HANDLE,
            OPEN-CODE, REASON.

      *      report reason, if any; stop if failed
           IF REASON IS NOT EQUAL TO MQRC-NONE
             DISPLAY 'MQOPEN ended with reason code ' REASON
             END-IF.

           IF OPEN-CODE IS EQUAL TO MQCC-FAILED
             DISPLAY 'unable to open target topic for output'
             MOVE REASON TO RETURN-CODE
             GOBACK
             END-IF.

      ****************************************************************
      *                                                              *
      *   Put messages to the target topic                           *
      *                                                              *
      ****************************************************************
           ADD MQPMO-FAIL-IF-QUIESCING MQPMO-NO-SYNCPOINT
               GIVING MQPMO-OPTIONS.

       PUTS.
      **   Display prompt for the message(s)                         *
           DISPLAY 'Please enter the message(s) '

           MOVE OPEN-CODE TO COMPLETION-CODE.
           PERFORM PUTR WITH TEST BEFORE
             UNTIL COMPLETION-CODE IS EQUAL TO MQCC-FAILED.

      ****************************************************************
      *                                                              *
      *   Close the target topic (if it was opened)                  *
      *                                                              *
      ****************************************************************
       CLOSES.
           MOVE MQCO-NONE TO OPTIONS.
           CALL 'MQCLOSE'
            USING HCONN, Q-HANDLE, OPTIONS,
            COMPLETION-CODE, REASON.

      *      report reason, if any
           IF REASON IS NOT EQUAL TO MQRC-NONE
             DISPLAY 'MQCLOSE ended with reason code ' REASON
             END-IF.

      ****************************************************************
      *                                                              *
      *  Disconnect from queue manager (if not previously connected) *
      *                                                              *
      ****************************************************************
       DISCS.
           IF CON-REASON IS NOT EQUAL TO MQRC-ALREADY-CONNECTED
             CALL 'MQDISC'
              USING HCONN, COMPLETION-CODE, REASON

      *      report reason, if any
             IF REASON IS NOT EQUAL TO MQRC-NONE
               DISPLAY 'MQDISC ended with reason code ' REASON
             END-IF
           END-IF.

       OVER.
      ** indicate that sample program has finished
           DISPLAY 'Sample AMQ0PUB4 end'.
           MOVE ZERO TO RETURN-CODE.
           GOBACK.

      ****************************************************************
      *                                                              *
      *   Put one message to the target topic                        *
      *                                                              *
      ****************************************************************
       PUTR.
           MOVE SPACES TO BUFFER.
           ACCEPT BUFFER.
           IF BUFFER IS NOT EQUAL TO SPACES
             PERFORM PUTIT
           ELSE
             MOVE MQCC-FAILED TO COMPLETION-CODE.

       PUTIT.
           MOVE 60 to BUFFER-LENGTH.
           CALL 'MQPUT'
            USING HCONN, Q-HANDLE,
            MESSAGE-DESCRIPTOR, PMOPTIONS,
            BUFFER-LENGTH, BUFFER,
            COMPLETION-CODE, REASON.

      *      report reason, if any
           IF REASON IS NOT EQUAL TO MQRC-NONE
             DISPLAY 'MQPUT ended with reason code ' REASON
             END-IF.

      ****************************************************************
      *                                                              *
      * END OF AMQ0PUB4                                              *
      *                                                              *
      ****************************************************************
